<!DOCTYPE HTML>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>组网设置</title>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <script type="text/javascript" src="../js/LAB.min.js"></script>
    <style type="text/css">
        body {
            display: none;
        }
    </style>
    <script type="text/javascript">
        $LAB
        .script("../js/launch.js?version=" + new Date().getTime()).wait(function () {
            init(function () {

                //分页显示
                function page_viewer() {
                    var get_count_func;
                    var get_content_func;
                    var prefix;

                    var cur_page = null;
                    var max_page = null;
                    var max_count = null;
                    var max_inpage_num = null;

                    this.init = function (_get_content_func, _prefix) {
                        cur_page = null;
                        max_page = null;
                        max_count = null;
                        max_inpage_num = null;

                        get_content_func = _get_content_func;
                        prefix = _prefix;
                        $("#" + prefix + "refresh").unbind("click");
                        $("#" + prefix + "page_goto_sub").unbind("click");
                        $("#" + prefix + "pre_page").unbind("click");
                        $("#" + prefix + "next_page").unbind("click");
                        $("#" + prefix + "page_start").unbind("click");
                        $("#" + prefix + "page_end").unbind("click");

                        $("#" + prefix + "refresh").click(refresh);
                        $("#" + prefix + "page_goto_sub").click(goto_page);
                        $("#" + prefix + "pre_page").click(pre_page);
                        $("#" + prefix + "next_page").click(next_page);
                        $("#" + prefix + "page_start").click(page_start);
                        $("#" + prefix + "page_end").click(page_end);
                        max_inpage_num = 10;
                        refresh();
                    }

                    function show_page_hint() {
                        if (cur_page != null && max_count && !isNaN(max_page)) {
                            $("#" + prefix + "page_hint").html("第 " + cur_page + " / " + max_page + " 页 &nbsp; 共 "+ max_count + " 条");
                        }
                    }

                    function refresh() {
                        $("#current_info_page_hint").html("");
                        get_content(true);
                    }

                    function get_content(refresh) {
                        if (refresh || cur_page == null) {
                            cur_page = 1;
                        }
                        get_content_func(function (_max_count) {
                            if (refresh || cur_page == null) {
                                cur_page = 1;
                            }
                            max_count = _max_count;
                            max_page = Math.ceil(max_count / max_inpage_num);
                            if (max_page == -1) max_page = 0;
                            if (max_page == 0) {
                                cur_page = 0;
                            }
                            show_page_hint();
                        }, (cur_page - 1) * max_inpage_num, (cur_page - 1) * max_inpage_num + max_inpage_num);
                    }

                    function next_page() {
                        if (cur_page != null && cur_page < max_page) {
                            cur_page++;
                            get_content(false);
                        }
                    }

                    function pre_page() {
                        if (cur_page != null && cur_page > 1) {
                            cur_page--;
                            get_content(false);
                        }
                    }

                    function page_start() {
                        if (cur_page != null && cur_page > 1) {
                            cur_page = 1;
                            get_content(false);
                        }
                    }

                    function page_end() {
                        if (cur_page != null && max_page > 1 && max_page != cur_page) {
                            cur_page = max_page;
                            get_content(false);
                        }
                    }

                    function goto_page() {
                        var page = parseInt($("#" + prefix + "page_goto").val());
                        if (isNaN(page) || page <= 0 || page > max_page) {
                            alert("请输入正确的页码！");
                            $("#" + prefix + "page_goto").val("");
                            return;
                        }
                        cur_page = page;
                        get_content(false);
                        $("#" + prefix + "page_goto").val("");
                    }
                }

                function dg_json_ajax(req, callback) {
                    //alert(JSON.stringify(req));
                    $.ajax({
                        type: "POST",
                        url: "../dgjson.php",
                        data: JSON.stringify(req),
                        success: function (data) {
                            //alert(data);
                            if (precheck(data)) return false;
                            callback(data);
                        },
                        dataType: "text"
                    });
                }

                //记录获取
                function dg_json_ajax_record_handler() {
                    var type;
                    var count_type;
                    var begin_type;
                    var end_type;
                    var record_call_back;
                    var count_call_back;
                    var req_data_call_back;
                    this.init = function (_type,_count_type,_begin_type,_end_type, _record_call_back,_count_call_back, _req_data_call_back) {
                        type = _type;
                        count_type = _count_type;
                        begin_type = _begin_type;
                        end_type = _end_type;
                        record_call_back = _record_call_back;
                        count_call_back = _count_call_back;
                        req_data_call_back = _req_data_call_back;
                    }
                    this.get = function (call_back,record_begin, record_end) {
                        var req = {};
                        req.type = type;
                        req[begin_type] = record_begin;
                        req[end_type] = record_end;
                        if (req_data_call_back) req = req_data_call_back(req);
                        dg_json_ajax(req, function (data) {
                            var max_count = count_call_back(data);
                            call_back(max_count);
                            record_call_back(data);
                        });
                    }
                    //this.get_count = function (call_back, record_begin, record_end) {
                    //    var req = {};
                    //    req.type = count_type;
                    //    req[begin_type] = record_begin;
                    //    req[end_type] = record_end;
                    //    if (req_data_call_back) req = req_data_call_back(req);
                    //    dg_json_ajax(req, function (data) {
                    //        var max_count = count_call_back(data);
                    //        call_back(max_count);
                    //    });
                    //}
                }

                function timeConverter(UNIX_timestamp){
                    var a = new Date(UNIX_timestamp * 1000);
                    //var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];
                    var year = a.getFullYear();
                    //var month = months[a.getMonth()];
                    var month = a.getMonth()+1;
                    var date = a.getDate();
                    var hour = a.getHours();
                    var min = a.getMinutes();
                    var sec = a.getSeconds();
                    //var time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec ;
                    var time = year + "-" + month + '-' + date + ' ' + hour + ':' + min + ':' + sec;
                    return time;
                }

                var tab_device_group_info = new function () {
                    function get_info_tr(name, sn, ip, defualt_type, enable_group, is_connected) {
                        var name_tr = "<td>" + name + "</td>";
                        var sn_tr = "<td>" + sn + "</td>";
                        var ip_tr = "<td><a target=\"_blank\" href="+ ip +">" + ip + "</a></td>";
                        var type_tr = "";
                        if (defualt_type == "input") {
                            type_tr = "<td>入口设备</td>";
                        } else if (defualt_type == "output") {
                            type_tr = "<td>出口设备</td>";
                        } else {
                            type_tr = "<td>未定义类型</td>";
                        }
                        var eg_tr = "";
                        if (enable_group) {
                            eg_tr = "<td>已开启</td>";
                        } else {
                            eg_tr = "<td>未开启</td>";
                        }
                        var ic_tr = "";
                        if (is_connected) {
                            ic_tr = "<td>已连接</td>";
                        } else {
                            ic_tr = "<td>未连接</td>";
                        }
                        return "<tr>" + name_tr + sn_tr + ip_tr + type_tr + eg_tr + ic_tr +"</tr>";
                    }
                    function init_device(data) {
                        //alert(data);
                        $("#devicetable tr:gt(0)").remove();
                        var json = eval("("+data+")");
                        json_data = json["all_gds"];
                        if (!json_data) {
                            return false;
                        }
                        $.each(json_data, function (index, item) {
                            $("#devicetable").append(get_info_tr(json_data[index]["vzid"].name, json_data[index]["vzid"].sn, json_data[index]["vzid"].ip_addr, json_data[index]["vzid"].type, json_data[index]["vzid"].enable_group, json_data[index].is_connected));
                        });
                        //init_selectmenu("#devicetable select", 110, 150);
                    }
                    function ajax_init_device() {
                        var req = {};
                        req.type = "get_agdi";
                        dg_json_ajax(req, init_device);                        
                    }
                    this.init = function () {
                        ajax_init_device();
                        $("#submit_refresh").click(ajax_init_device);
                    }
                }

                function get_info_tr(plate, tv_sec, state, name, ip) {
                    var state_str = "";
                    if (state == 0) {
                        state_str = "使用";
                    } else if (state == 1) {
                        state_str = "未使用";
                    } else if (state == 2) {
                        state_str = "失效";
                    } else if (state == 3) {
                        state_str = "未完成";
                    }
                    var dname = get_decode_name(name);
                    return '<tr><td>' + plate + '</td><td>' + state_str + '</td><td>' + dname + '</td><td>' + timeConverter(tv_sec) + '</td><td>' + ip + '</td></tr>';
                }

                function get_decode_name(name) {
                    if (name != "") {
                        var name_pre = name.split("#")[0];
                        var arr = name_pre.split("&");
                        var dname = "";
                        for (var i = 0; i < arr.length; i++) {
                            dname += Base64.decode(arr[i], true);
                            if (i < arr.length - 1) {
                                dname += " ";
                            }
                        }
                        return dname;
                    }
                    return "";
                }
                function get_leave_info(plate, state, enter_name, enter_time, enter_ip, leave_name, leave_time, leave_ip) {
                    var state_str = "";
                    if (state == 0) {
                        state_str = "使用";
                    } else if (state == 1) {
                        state_str = "未使用";
                    } else if (state == 2) {
                        state_str = "失效";
                    } else if (state == 3) {
                        state_str = "未完成";
                    }
                    var e_name = get_decode_name(enter_name);
                    var l_name = get_decode_name(leave_name);
                    return '<tr><td>' + plate + '</td><td>' + state_str + '</td><td>' + e_name + '</td><td>' + timeConverter(enter_time) + '</td><td>' + enter_ip + '</td><td>' + l_name + '</td><td>' + timeConverter(leave_time) + '</td><td>' + leave_ip + '</td></tr>';
                }

                var tab_current_record = new function () {
                    function get_buffer_records_count(data) {
                        //alert(data);
                        var json = eval('(' + data + ')');
                        return json["obrs_size"];
                    }

                    function show_buffer_records(data) {
                        $("#current_device_info tr:gt(0)").remove();
                        var json = eval('(' + data + ')');
                        var json_data = json["obrs_data"];
                        if (!json_data) {
                            return false;
                        }
                        $.each(json_data, function (index, item) {
                            $("#current_device_info").append(get_info_tr(json_data[index]["input_record"]["ivs_result_param"].plate, json_data[index]["input_record"]["ivs_result_param"]["timeval"].tv_sec, json_data[index]["input_record"].state, json_data[index]["input_record"]["device_name"].name, json_data[index]["input_record"]["device_name"].ip_addr));
                        });
                    }

                    function get_leave_records_count(data) {
                        var json = eval('(' + data + ')');
                        return json["ors_size"];
                    }

                    function show_leave_records(data) {
                        $("#current_device_info tr:gt(0)").remove();
                        var json = eval('(' + data + ')');
                        var json_data = json["ors_data"];
                        if (!json_data) {
                            return false;
                        }
                        $.each(json_data, function (index, item) {
                            $("#current_device_info").append(get_leave_info(json_data[index]["input_record"]["ivs_result_param"].plate,
                                    json_data[index]["output_record"].state,
                                    json_data[index]["input_record"]["device_name"].name,
                                    json_data[index]["input_record"]["ivs_result_param"]["timeval"].tv_sec,
                                    json_data[index]["input_record"]["device_name"].ip_addr,
                                    json_data[index]["output_record"]["device_name"].name,
                                    json_data[index]["output_record"]["ivs_result_param"]["timeval"].tv_sec,
                                    json_data[index]["output_record"]["device_name"].ip_addr));
                        });
                    }
                    
                    function show_input_records(data) {
                        //alert(data);
                        $("#current_device_info tr:gt(0)").remove();
                        var json = eval('(' + data + ')');
                        var json_data = json["irs_data"];
                        if (!json_data) {
                            return false;
                        }
                        $.each(json_data, function (index, item) {
                            $("#current_device_info").append(get_info_tr(json_data[index]["input_record"]["ivs_result_param"].plate, json_data[index]["input_record"]["ivs_result_param"]["timeval"].tv_sec, json_data[index]["input_record"].state, json_data[index]["input_record"]["device_name"].name, json_data[index]["input_record"]["device_name"].ip_addr));
                        });
                    }

                    function get_input_records_count(data) {
                        var json = eval('(' + data + ')');
                        return json["irs_size"];
                    }
                    var viewer = new page_viewer();
                    var record_handler = new dg_json_ajax_record_handler();

                    function output_change_table(value) {
                        if (value == 0) {
                            $("#current_device_info").empty();
                            var tr = '<tr class="ui-widget-header"><th width="20%">车牌号</th><th width="20%">状态</th><th width="20%">入口名称</th><th width="20%">进入时间</th><th width="20%">入口IP地址</th></tr>';
                            $("#current_device_info").append(tr);
                            record_handler.init("get_obrs",
                                                "get_obrs",
                                                "pos_begin",
                                                "pos_end",
                                                show_buffer_records,
                                                get_buffer_records_count);
                            viewer.init(record_handler.get, "current_info_");
                        }
                        else if (value == 1) {
                            $("#current_device_info").empty();
                            var tr = '<tr class="ui-widget-header"><th width="10%">车牌号</th><th width="10%">状态</th><th width="20%">入口名称</th><th width="10%">进入时间</th><th width="10%">入口IP地址</th><th width="20%">出口名称</th><th width="10%">出去时间</th><th width="10%">出口IP地址</th></tr>';
                            $("#current_device_info").append(tr);
                            record_handler.init("get_ors",
                                "get_ors",
                                "pos_begin",
                                "pos_end",
                                show_leave_records,
                                get_leave_records_count);
                            viewer.init(record_handler.get, "current_info_");
                        } else if (value == 2) {
                            $("#current_device_info").empty();
                            var tr = '<tr class="ui-widget-header"><th width="20%">车牌号</th><th width="20%">状态</th><th width="20%">入口名称</th><th width="20%">进入时间</th><th width="20%">入口IP地址</th></tr>';
                            $("#current_device_info").append(tr);
                            record_handler.init("get_irs",
                                "get_irs",
                                "pos_begin",
                                "pos_end",
                                show_input_records,
                                get_input_records_count);
                            viewer.init(record_handler.get, "current_info_");
                        }
                    }

                    function updata_device_type() {
                        var value = $("#device_type").val();
                        output_change_table(value);
                    }
                    this.init = function () {                        
                        //get_device_input_info();
                        init_selectmenu("#device_type", 110, 150);
                        $("#device_type").on("selectmenuchange", function (event, ui) { updata_device_type(); });
                        output_change_table(2);
                    }
                }

                var tab_remain_vehicles = new function () {
                    var cur_drag_parent = null;
                    var sel_sn_list = [];
                    var device_data_json;
                    var isSave = true;
                    var isNewNode = true;
                    var MoveTest = {
                        curTarget: null,
                        curTmpTarget: null,
                        hintText: "操作设备与目标设备状态不同，是否将操作设备状态改为 ",
                        noSel: function () {
                            try {
                                window.getSelection ? window.getSelection().removeAllRanges() : document.selection.empty();
                            } catch (e) { }
                        },
                        dragTree2Dom: function (treeId, treeNodes) {
                            return !treeNodes[0].isParent;
                        },
                        prevTree: function (treeId, treeNodes, targetNode) {
                            return false;
                        },
                        nextTree: function (treeId, treeNodes, targetNode) {
                            return false;
                        },
                        innerTree: function (treeId, treeNodes, targetNode) {
                            return targetNode != null;
                        },
                        dom2Tree: function (e, treeId, treeNode) {
                            var target = MoveTest.curTarget, tmpTarget = MoveTest.curTmpTarget, newNode;
                            if (!target) return;
                            var zTree = $.fn.zTree.getZTreeObj("treeDemo"), parentNode;
                            if (treeNode != null && treeNode.isParent && treeNode.level != 1) {
                                parentNode = treeNode;
                            } else if (treeNode != null && !treeNode.isParent && treeNode.getParentNode().level == 0) {
                                var noparentsame = false;
                                if (treeNode.deviceType != target.attr("deviceType")) {
                                    var hintText = get_hintText(target.attr("deviceIP"), treeNode.name, treeNode.deviceType);
                                    var con = confirm(hintText);
                                    if (con) {
                                        target.attr("deviceType", treeNode.deviceType);
                                        update_device_type(target.attr("deviceSN"), "type", treeNode.deviceType);
                                        if (target.attr("deviceSN") == device_data_json["vzid"].sn) {
                                            $("#cur_device_type").select_val(treeNode.deviceType);
                                        }
                                    } else {
                                        noparentsame = true;
                                    }
                                }
                                if (!noparentsame) {
                                    parentNode = treeNode.getParentNode();
                                    var name = get_nosamename("相辅");
                                    newNode = zTree.addNodes(parentNode, { id: name, name: name, isParent: true, open: true, icon: "../style/common/img/CameraGroup.png" });
                                    movenode_and_setflag(treeNode, newNode[0], newNode[0].tId);
                                    parentNode = newNode[0];
                                }
                            } else if (treeNode != null && treeNode.isParent && treeNode.level == 1) {
                                var isparentsame = false;
                                var status = isSameType(target.attr("deviceType"), treeNode);
                                if (status) {
                                    var hintText = get_hintText(target.attr("deviceIP"), treeNode.children[0].name, treeNode.children[0].deviceType);
                                    var con = confirm(hintText);
                                    if (con) {
                                        target.attr("deviceType", treeNode.children[0].deviceType);
                                        update_device_type(target.attr("deviceSN"), "type", treeNode.children[0].deviceType);
                                        if (target.attr("deviceSN") == device_data_json["vzid"].sn) {
                                            $("#cur_device_type").select_val(treeNode.children[0].deviceType);
                                        }
                                    } else {
                                        isparentsame = true;
                                    }
                                }
                                if (!isparentsame) {
                                    parentNode = treeNode;
                                }
                            }

                            if (tmpTarget) tmpTarget.remove();
                            if (!!parentNode) {
                                var url = "../style/common/img/s_offline.png";
                                if (target.attr("deviceSN") == device_data_json["vzid"].sn) {
                                    url = "../style/common/img/s_online.png";
                                }
                                var nodes = zTree.addNodes(parentNode, { id: target.attr("domId"), name: target.attr("deviceIP"), deviceSN: target.attr("deviceSN"), deviceType: target.attr("deviceType"), deviceIP: target.attr("deviceIP"), deviceFlag: target.attr("deviceFlag"), icon: url });
                                if (parentNode.level == 1) {
                                    nodes[0].deviceFlag = parentNode.tId;
                                }
                                target.remove();
                                update_device_flag(nodes[0], nodes[0].deviceFlag);
                                zTree.selectNode(nodes[0]);
                                MoveTest.mouseDown(e, treeId, nodes[0].getParentNode());
                            } else {
                                target.removeClass("domBtn_Disabled");
                                target.addClass("domBtn");
                            }
                            MoveTest.curTarget = null;
                            MoveTest.curTmpTarget = null;
                        },
                        bindDom: function () {
                            $(".categoryDiv").bind("mousedown", MoveTest.bindMouseDown);
                        },
                        bindMouseDown: function (e) {
                            var target = e.target;
                            if (target.parentNode.className == "domBtn") {
                                target = target.parentNode;
                            }
                            if (target != null && target.className == "domBtn") {
                                var doc = $(document), target = $(target),
                                docScrollTop = doc.scrollTop(),
                                docScrollLeft = doc.scrollLeft(); 
                                target.addClass("domBtn_Disabled");
                                target.removeClass("domBtn");
                                var str = "<div class=\"dom_tmp\" domid=\"21\"><p class=\"img\"></p><p>" + target.text() + "</p></div>";
                                curDom = $(str);
                                curDom.appendTo("body");

                                curDom.css({
                                    "top": (e.clientY + docScrollTop + 3) + "px",
                                    "left": (e.clientX + docScrollLeft + 3) + "px"
                                });
                                MoveTest.curTarget = target;
                                MoveTest.curTmpTarget = curDom;

                                doc.bind("mousemove", MoveTest.bindMouseMove);
                                doc.bind("mouseup", MoveTest.bindMouseUp);
                                doc.bind("selectstart", MoveTest.docSelect);
                            }
                            if (e.preventDefault) {
                                e.preventDefault();
                            }
                        },
                        bindMouseMove: function (e) {
                            MoveTest.noSel();
                            var doc = $(document),
                            docScrollTop = doc.scrollTop(),
                            docScrollLeft = doc.scrollLeft(),
                            tmpTarget = MoveTest.curTmpTarget;
                            if (tmpTarget) {
                                tmpTarget.css({
                                    "top": (e.clientY + docScrollTop + 3) + "px",
                                    "left": (e.clientX + docScrollLeft + 3) + "px"
                                });
                            }
                            return false;
                        },
                        bindMouseUp: function (e) {
                            var doc = $(document);
                            doc.unbind("mousemove", MoveTest.bindMouseMove);
                            doc.unbind("mouseup", MoveTest.bindMouseUp);
                            doc.unbind("selectstart", MoveTest.docSelect);

                            var target = MoveTest.curTarget, tmpTarget = MoveTest.curTmpTarget;
                            if (tmpTarget) tmpTarget.remove();

                            if ($(e.target).parents("#treeDemo").length == 0) {
                                if (target) {
                                    target.removeClass("domBtn_Disabled");
                                    target.addClass("domBtn");
                                }
                                MoveTest.curTarget = null;
                                MoveTest.curTmpTarget = null;
                            }
                        },
                        bindSelect: function () {
                            return false;
                        },
                        remove: function (treeId, treeNode) {
                            var zTree = $.fn.zTree.getZTreeObj("treeDemo");
                            var oldparent = null;
                            if (treeNode.isParent) {
                                traverse_tree(treeNode);
                            } else {
                                del_treeNode(treeNode);
                            }
                            if (treeNode.level != 0) {
                                oldparent = treeNode.getParentNode();
                                if (!oldparent.children || oldparent.children.length == 1) {
                                    zTree.removeNode(oldparent);
                                }
                            }
                            clear_tb();
                        },
                        mouseDown: function (event, treeId, treeNode) {
                            if (!treeNode) {
                                return false;
                            }

                            treeNode = get_root_node(treeNode);

                            sel_sn_list = [];
                            init_cur_node(treeNode);
                        },
                        rename: function (event, treeId, treeNode) {
                            if (!treeNode.isParent) {
                                update_device_flag(treeNode,treeNode.deviceFlag);
                            } else {
                                rename_rf(treeNode);
                            }
                            MoveTest.mouseDown(event, treeId, treeNode);
                        },
                        beforeRename: function (treeId, treeNode, newName) {
                            var zTree = $.fn.zTree.getZTreeObj("treeDemo");
                            var same_name = true;

                            same_name = isSameName(newName, treeNode.tId);
                            if (!same_name) {
                                alert("不能与其他类名相同");
                            }
                            if (newName.length == 0) {
                                alert("名字不能为空");
                                same_name = false;
                            }
                            if (newName.length > 16) {
                                alert("名字不能大于16个字符");
                                same_name = false;
                            }
                            return same_name;
                        },
                        nodeDrop: function (event, treeId, treeNodes, targetNode) {
                            var zTree = $.fn.zTree.getZTreeObj("treeDemo");
                            if (treeNodes[0].getParentNode().level == 1) {
                                treeNodes[0].deviceFlag = treeNodes[0].getParentNode().tId;
                                update_device_flag(treeNodes[0], treeNodes[0].deviceFlag);
                            } else {
                                update_device_type(treeNodes[0].deviceSN, "name", get_device_name(treeNodes[0]));
                            }
                            if (cur_drag_parent) {
                                if (cur_drag_parent.children.length == 0) {
                                    zTree.removeNode(cur_drag_parent);
                                } else {
                                    MoveTest.onRemove(event, treeId, cur_drag_parent.children[0]);
                                }
                                cur_drag_parent = null;
                            }
                            MoveTest.mouseDown(event, treeId, treeNodes[0]);
                        },
                        nodeDrag: function (event, treeId, treeNodes) {
                            cur_drag_parent = treeNodes[0].getParentNode();
                        },
                        beforeDrag: function (treeId, treeNodes) {
                            if (treeNodes[0].isParent) {
                                return false;
                            }
                        },
                        beforeDrop: function (treeId, treeNodes, targetNode) {
                            var oldparent = null;
                            var oldroot = null;
                            var zTree = $.fn.zTree.getZTreeObj("treeDemo");
                            if (!targetNode.isParent && targetNode.getParentNode().level == 0) {
                                if (treeNodes[0].deviceType != targetNode.deviceType) {
                                    var hintText = get_hintText(treeNodes[0].name, targetNode.name, targetNode.deviceType);
                                    var con = confirm(hintText);
                                    if (con) {
                                        treeNodes[0].deviceType = targetNode.deviceType;
                                        update_device_type(treeNodes[0].deviceSN, "type", targetNode.deviceType);
                                        if (treeNodes[0].deviceSN == device_data_json["vzid"].sn) {
                                            $("#cur_device_type").select_val(targetNode.deviceType);
                                        }
                                    } else {
                                        return false;
                                    }
                                }

                                if (treeNodes[0].getParentNode().children.length == 2 && treeNodes[0].getParentNode().level == 1) {
                                    oldparent = treeNodes[0].getParentNode();
                                } else if (treeNodes[0].getParentNode().children.length == 1 && treeNodes[0].getParentNode().level == 0) {
                                    oldroot = treeNodes[0].getParentNode();
                                }
                                var parentNode = targetNode.getParentNode();
                                var name = get_nosamename("相辅");
                                newNode = zTree.addNodes(parentNode, { id: name, name: name, isParent: true, open: true, icon: "../style/common/img/CameraGroup.png" });
                                movenode_and_setflag(targetNode, newNode[0], newNode[0].tId);

                                movenode_and_setflag(treeNodes[0], newNode[0], newNode[0].tId);

                                if (oldparent) {
                                    movenode_and_setflag(oldparent.children[0], oldparent.getParentNode(),"");
                                    zTree.removeNode(oldparent);
                                }
                                if(oldroot){
                                    zTree.removeNode(oldroot);
                                }
                                MoveTest.mouseDown(null, treeId, treeNodes[0]);
                                return false;
                            }
                            if (!targetNode.isParent && targetNode.getParentNode().level != 0) {
                                return false;
                            }
                            if (targetNode.isParent && targetNode.level == 1) {
                                var status = isSameType(treeNodes[0].deviceType, targetNode);
                                if (status) {
                                    var hintText = get_hintText(treeNodes[0].name, targetNode.children[0].name, targetNode.children[0].deviceType);
                                    var con = confirm(hintText);
                                    if (con) {
                                        treeNodes[0].deviceType = targetNode.children[0].deviceType;
                                        update_device_type(treeNodes[0].deviceSN, "type", treeNodes[0].deviceType);
                                        if (treeNodes[0].deviceSN == device_data_json["vzid"].sn) {
                                            $("#cur_device_type").select_val(treeNodes[0].deviceType);
                                        }
                                    } else {
                                        return false;
                                    }
                                }
                            }
                        },
                        dblClickExpand: function dblClickExpand(treeId, treeNode) {
                            return treeNode.level > 0;
                        },
                        onRemove: function (event, treeId, treeNode) {
                            var zTree = $.fn.zTree.getZTreeObj("treeDemo");
                            var parentNode = treeNode.getParentNode();
                            if (!parentNode) {
                                return false;
                            }
                            rootNode = parentNode.getParentNode();
                            if (!rootNode || !parentNode.children) {
                                return false;
                            }
                            if (parentNode.children.length == 1) {
                                movenode_and_setflag(parentNode.children[0], rootNode,"");
                                zTree.removeNode(parentNode);
                            }
                        }
                    };

                    function get_hintText(ip,name,type) {
                        var cn_type = get_cn_type(type);
                        return ip + " 与 " + name + " 状态不同，是否将 " + ip + " 状态改为 " + cn_type + "?"
                    }
                    var cur_node;
                    function update_device_type(sn, type, value) {
                        if (device_data_json["vzid"].sn == sn) {
                            device_data_json["vzid"][type] = value;
                        } else {
                            var list = device_data_json["group_cfg"]["group_vzids"];
                            for (var i = 0; i < list.length; i++) {
                                if (list[i].sn == sn) {
                                    list[i][type] = value;
                                    break;
                                }
                            }
                        }
                        init_table();
                        isSave = false;
                    }
                    function get_cn_type(type) {
                        if (type == "input") {
                            return "入口";
                        } else if (type == "output") {
                            return "出口";
                        } else {
                            return "未定义";
                        }
                    }
                    function isSameType(type,parentNode) {
                        var flag = false;
                        for (var i = 0; i < parentNode.children.length; i++) {
                            if (parentNode.children[i].deviceType != type) {
                                flag = true;
                                break;
                            }
                        }
                        return flag;
                    }
                    function get_root_node(treenode) {
                        if (treenode.level == 0) {
                            return treenode;
                        } else {
                            return get_root_node(treenode.getParentNode());
                        }
                    }
                    function movenode_and_setflag(treeNode,parentNode,flag) {
                        var zTree = $.fn.zTree.getZTreeObj("treeDemo");
                        treeNode.deviceFlag = flag;
                        zTree.moveNode(parentNode, treeNode, "inner");
                        update_device_flag(treeNode, treeNode.deviceFlag);
                    }
                    function clear_tb() {
                        var zTree = $.fn.zTree.getZTreeObj("treeDemo");
                        sel_sn_list = [];
                        $("#show_tree_cur tr:gt(0)").remove();
                        $("#show_input_tb tr:gt(0)").remove();
                        $("#show_output_tb tr:gt(0)").remove();
                        zTree.cancelSelectedNode();
                    }
                    function isSameName(name, tid) {
                        var zTree = $.fn.zTree.getZTreeObj("treeDemo");
                        var nodes0 = zTree.getNodesByParam("isParent",true, null);
                        for (var i = 0; i < nodes0.length; i++) {
                            if (nodes0[i].tId == tid) {
                                continue;
                            }
                            if (nodes0[i].name == name) {
                                return false;
                            }
                        }
                        return true;
                    }
                    function init_cur_node(treeNode) {
                        var str_td = "";
                        $("#show_tree_cur tr:gt(0)").remove();
                        $("#show_input_tb tr:gt(0)").remove();
                        $("#show_output_tb tr:gt(0)").remove();
                        if (!treeNode || !treeNode.children) {
                            return false;
                        }
                        for (var i = 0; i < treeNode.children.length; i++) {
                            if (treeNode.children[i].isParent) {
                                for (var j = 0; j < treeNode.children[i].children.length; j++) {
                                    str_td += get_tr_str(treeNode.children[i].children[j]);
                                    sel_sn_list.push(treeNode.children[i].children[j].deviceSN);
                                }
                            } else {
                                str_td += get_tr_str(treeNode.children[i]);
                                sel_sn_list.push(treeNode.children[i].deviceSN);
                            }
                        }
                        $("#show_tree_cur").append(str_td);
                        init_table();
                        for (var i = 0; i < treeNode.children.length; i++) {
                            if (treeNode.children[i].isParent) {
                                for (var j = 0; j < treeNode.children[i].children.length; j++) {
                                    bind_select_input(treeNode.children[i].children[j]);
                                }
                            } else {
                                bind_select_input(treeNode.children[i]);
                            }
                        }
                    }
                    function bind_select_input(treeNode) {
                        var ele_select = "#" + treeNode.deviceSN + "_select";
                        var ele_input = "#" + treeNode.deviceSN + "_input";
                        init_selectmenu(ele_select, 100, 150);
                        $(ele_select).select_val(treeNode.deviceType);
                        $(ele_select).on("selectmenuchange", function (event, ui) {
                            if (treeNode.getParentNode().level == 1) {
                                var childs = treeNode.getParentNode().children;
                                for (var i = 0; i < childs.length; i++) {
                                    var cur_select = "#" + childs[i].deviceSN + "_select";
                                    childs[i].deviceType = $(ele_select).val();
                                    $(cur_select).select_val(childs[i].deviceType);
                                    update_device_type(childs[i].deviceSN, "type", childs[i].deviceType);
                                    if (childs[i].deviceSN == device_data_json["vzid"].sn) {
                                        $("#cur_device_type").select_val($(ele_select).val());
                                    }
                                }
                            } else {
                                treeNode.deviceType = $(ele_select).val();
                                update_device_type(treeNode.deviceSN, "type", treeNode.deviceType);
                                if (treeNode.deviceSN == device_data_json["vzid"].sn) {
                                    $("#cur_device_type").select_val($(ele_select).val());
                                }
                            }
                        });
                    }
                    function get_tr_str(treeNode) {
                        return '<tr><td>' + treeNode.name + '</td><td>' + treeNode.deviceIP + '</td><td><select id="' + treeNode.deviceSN + '_select' + '" deviceSN="' + treeNode.deviceSN + '"><option value="input">入口</option><option value="output">出口</option><option value="unkown">未定义</option></select></td></tr>';
                    }

                    function rename_rf(treeNode) {
                        if (!treeNode.children) {
                            return false;
                        }
                        for (var i = 0; i < treeNode.children.length; i++) {
                            if (!treeNode.children[i].isParent) {
                                update_device_flag(treeNode.children[i], treeNode.children[i].deviceFlag);
                            } else {
                                rename_rf(treeNode.children[i]);
                            }
                        }
                    }
                    function update_device_flag(treeNode, value) {
                        var name = get_device_name(treeNode) + "#" + get_flag("encode",value);
                        update_device_type(treeNode.deviceSN, "name", name);
                    }
                    function get_flag(type,value) {
                        if (value == "") {
                            return value;
                        } else {
                            if (type == "encode") {
                                return Base64.encode(value, true);
                            } else {
                                return Base64.decode(value, true);
                            }
                        }
                    }
                    function get_device_name(treeNode) {
                        if (treeNode.level == 0) {
                            return Base64.encode(treeNode.name,true);
                        } else {
                            return get_device_name(treeNode.getParentNode()) + "&" + Base64.encode(treeNode.name, true);
                        }
                    }

                    function traverse_tree(treeNode) {
                        if (!treeNode.children) {
                            return false;
                        }
                        for (var i = 0; i < treeNode.children.length; i++) {
                            if (!treeNode.children[i].isParent) {
                                del_treeNode(treeNode.children[i]);
                            } else {
                                traverse_tree(treeNode.children[i]);
                            }
                        }
                    }
                    function setRenameBtn(treeId, treeNode) {
                        return true;
                    }

                    function setRemove(treeId, treeNode) {
                        //if (treeNode.level == 0) {
                        //    return false;
                        //}
                        return true;
                    }
                    var setting = {
                        edit: {
                            enable: true,
                            showRemoveBtn: setRemove,
                            showRenameBtn: setRenameBtn,
                            drag: {
                                prev: MoveTest.prevTree,
                                next: MoveTest.nextTree,
                                inner: MoveTest.innerTree
                            }
                        },
                        data: {
                            keep: {
                                parent: true,
                                leaf: false
                            },
                            simpleData: {
                                enable: true
                            }
                        },
                        callback: {
                            onMouseUp: MoveTest.dom2Tree,
                            beforeRemove: MoveTest.remove,
                            onMouseDown: MoveTest.mouseDown,
                            onRename: MoveTest.rename,
                            beforeRename: MoveTest.beforeRename,
                            onDrop: MoveTest.nodeDrop,
                            onDrag: MoveTest.nodeDrag,
                            beforeDrag: MoveTest.beforeDrag,
                            beforeDrop: MoveTest.beforeDrop,
                            onRemove: MoveTest.onRemove
                        },
                        view: {
                            selectedMulti: false,
                            //dblClickExpand: MoveTest.dblClickExpand,
                            showLine:false
                        }
                    };

                    var zNodes = [
                        //{ id: 1, pId: 0, name: "车库1", isParent: true, open: true }
                    ];

                    function get_remain_info(plate, ip, name, time) {
                        return '<tr><td>' + plate + '</td><td>' + ip + '</td><td>' + name + '</td><td>' + timeConverter(time) + '</td></tr>';
                    }
                    function show_remain_paltes(data) {
                        $("#remain_info tr:gt(0)").remove();
                        var json_data = eval(data);
                        $.each(json_data, function (index, item) {
                            $("#remain_info").append(get_remain_info(json_data[index].plate, json_data[index].enter_ip, json_data[index].enter_name, json_data[index].enter_time));
                        });
                    }

                    function add_new_node() {
                        var zTree = $.fn.zTree.getZTreeObj("treeDemo");
                        var name = get_nosamename("车库");
                        var nodes = zTree.addNodes(null, { id: name, name: name, isParent: true, open: true });
                        clear_tb();
                        zTree.selectNode(nodes[0]);
                        isNewNode = false;
                    }
                    function get_nosamename(name) {
                        var str = name;
                        str += Math.ceil(Math.random() * 100);
                        if (isSameName(str,"")) {
                            return str;
                        } else {
                            get_nosamename();
                        }
                    }
                    function appendEle(sn, type, ip, num, flag) {
                        var str = "<div class=\"domBtn\" domid=\"" + num + "\" deviceSN=\"" + sn + "\" deviceIP=\"" + ip + "\" deviceType=\"" + type + "\" deviceFlag=\"" + flag + "\"><p class=\"img\"></p><p>" + ip + "</p></div>";
                        $(".categoryDiv").append(str);
                    }

                    function get_tree_znode(obj) {
                        var arr_flag = obj.name.split("#");
                        var device_flag = "";
                        if (arr_flag[1]) {
                            device_flag = get_flag("decode",arr_flag[1]);
                        }
                        var arr = arr_flag[0].split("&");
                        var type = obj.type;
                        var sn = obj.sn;
                        var ip = obj.ip_addr;
                        var status = obj.connect_status;
                        for (var j = 0; j < arr.length; j++) {
                            if (arr[j] == "") {
                                continue;
                            }
                            var json = {};
                            json.id = Base64.decode(arr[j], true);
                            json.name = Base64.decode(arr[j], true);
                            if (j == 0) {
                                json.pId = 0;
                            } else {
                                json.pId = Base64.decode(arr[j-1], true);
                            }
                            if (j != arr.length - 1) {
                                json.isParent = true;
                                json.open = true;
                                if (arr.length == 3 && j == 1) {
                                    json.icon = "../style/common/img/CameraGroup.png";
                                }
                            } else {
                                json.deviceSN = sn;
                                json.deviceIP = ip;
                                json.deviceType = type;
                                json.deviceFlag = device_flag;
                                if (status != null && status != 1) {
                                    json.icon = "../style/common/img/s_offline.png";
                                } else {
                                    json.icon = "../style/common/img/s_online.png";
                                }
                            }
                            var flag = true;
                            for (var k = 0; k < zNodes.length; k++) {
                                if (JSON.stringify(zNodes[k]) == JSON.stringify(json)) {
                                    flag = false;
                                    break;
                                }
                            }
                            if (flag) {
                                zNodes.push(json);
                            }
                        }
                    }

                    function init_table() {
                        $("#show_input_tb tr:gt(0)").remove();
                        $("#show_output_tb tr:gt(0)").remove();
                        if (sel_sn_list.length == 0) {
                            return false;
                        }
                        for(var i =0;i<sel_sn_list.length;i++){
                            if(device_data_json["vzid"].sn == sel_sn_list[i]){
                                append_tb(device_data_json["vzid"]);
                            }
                        }
                        var list = device_data_json["group_cfg"]["group_vzids"];
                        for (var i = 0; i < list.length; i++) {
                            for (var j = 0; j < sel_sn_list.length; j++) {
                                if (list[i].sn == sel_sn_list[j]) {
                                    append_tb(list[i]);
                                }
                            }
                        }
                    }

                    function append_tb(obj) {
                        var name = obj.name.split("#")[0];
                        var name = name.substring(name.lastIndexOf("&")+1);
                        var str = "<tr><td>" + Base64.decode(name,true) + "</td><td>" + obj.ip_addr + "</td></tr>";
                        if (obj.type == "input") {
                            $("#show_input_tb").append(str);
                        } else if (obj.type == "output") {
                            $("#show_output_tb").append(str);
                        }
                    }
                    function init_tree_and_tb(ajaxdata) {
                        if(precheck(ajaxdata)){
                            return false;
                        }
                        var json_data;
                        try{
                            json_data = eval("(" + ajaxdata + ")");
                        } catch (e) {
                            return false;
                        }
                        if (!json_data.vzid || !json_data.group_cfg) {
                            return false;
                        }
                        $(".categoryDiv").empty();
                        device_data_json = json_data;
                        $("#cur_device_type").select_val(json_data["vzid"].type);
                        $("#cur_device_span").html("当前设备 IP:" + json_data["vzid"].ip_addr);
                        if (json_data["vzid"].name == "") {
                            appendEle(json_data["vzid"].sn, json_data["vzid"].type, json_data["vzid"].ip_addr, 10,"");
                        } else {
                            get_tree_znode(json_data["vzid"]);
                        }
                        var list = json_data["group_cfg"]["group_vzids"];
                        for (var i = 0; i < list.length; i++) {
                            if (list[i].name == "") {
                                appendEle(list[i].sn, list[i].type, list[i].ip_addr, i + 11, "");
                            } else {
                                get_tree_znode(list[i]);
                            }
                        }
                        $.fn.zTree.init($("#treeDemo"), setting, zNodes);
                        MoveTest.bindDom();
                        
                        var id = setInterval(function () {
                            if (isSave) {
                                get_connect_status();
                            }
                        }, 5000);
                    }

                    function get_connect_status() {
                        var req = {};
                        req.type = "get_group_cfg";
                        $.ajax({
                            type: "POST",
                            url: "../dgjson.php",
                            data: JSON.stringify(req),
                            success: function (data) {
                                if (precheck(data)) return false;
                                var json_data = eval("(" + data + ")");
                                if (!json_data.vzid || !json_data.group_cfg) {
                                    return false;
                                }
                                var zTree = $.fn.zTree.getZTreeObj("treeDemo");
                                var nodes = get_all_node();
                                var deviceArr = json_data.group_cfg.group_vzids;
                                if (!deviceArr) {
                                    return false;
                                }
                                for (var i = 0; i < nodes.length; i++) {
                                    for (var j = 0; j < deviceArr.length; j++) {
                                        if(nodes[i].deviceSN == deviceArr[j].sn){
                                            if (deviceArr[j].connect_status == 1) {
                                                nodes[i].icon = "../style/common/img/s_online.png";
                                            } else {
                                                nodes[i].icon = "../style/common/img/s_offline.png";
                                            }
                                            zTree.updateNode(nodes[i]);
                                        }
                                    }
                                }
                            },
                            dataType: "text"
                        });
                    }
                    function del_treeNode(treeNode) {
                        if (cur_node) {
                            if (treeNode.deviceSN == cur_node.deviceSN) {
                                $("#show_tree_cur tr:gt(0)").remove();
                                cur_node = null;
                            }
                        }
                        update_device_type(treeNode.deviceSN, "name", "");
                        appendEle(treeNode.deviceSN, treeNode.deviceType, treeNode.deviceIP, treeNode.tId,"");
                    }
                    function get_all_node() {
                        var zTree = $.fn.zTree.getZTreeObj("treeDemo");
                        var nodeArr = [];
                        var rootNodes = zTree.getNodes();
                        for (var i = 0; i < rootNodes.length; i++) {
                            get_all_child(rootNodes[i], nodeArr);
                        }
                        return nodeArr;
                    }
                    function get_all_child(node, arr) {
                        if (node.isParent) {
                            var childNodes = node.children;
                            if (childNodes) {
                                for (var i = 0; i < childNodes.length; i++) {
                                    if (childNodes[i].isParent) {
                                        arr = get_all_child(childNodes[i], arr);
                                    } else {
                                        arr.push(childNodes[i]);
                                    }
                                }
                            }
                        } else {
                            arr.push(node);
                        }
                        return arr;
                    }
                    function set_device_info() {
                        var arr = get_all_node();
                        var names = "";
                        for (var i = 0; i < arr.length; i++) {
                            if (arr[i].deviceType == "unkown") {
                                names += arr[i].name;
                                if (i < arr.length - 1) {
                                    names += "、";
                                }
                            }
                        }
                        if (names != "") {
                            var con = confirm(names + " 状态为未定义，确定保存?");
                            if (!con) {
                                return false;
                            }
                        }
                        isNewNode = true;
                        isSave = true;
                        var req = device_data_json;
                        req.type = "set_group_cfg";
                        jsonstr = JSON.stringify(req);
                        dg_json_ajax(req, function (ajaxdata) {
                            var json = eval("(" + ajaxdata + ")");
                            if (json.state == 200) {
                                show_informer();
                            }
                        });
                    }
                    this.init = function () {
                        init_selectmenu("#cur_device_type", 110, 150);
                        if (g_style_time == "new") {
                            $("#cur_device_type").remove();
                        }
                        $("#new_node").click(add_new_node);
                        $("#set_device_info").click(set_device_info);
                        $("#cur_device_type").on("selectmenuchange", function (event, ui) {
                            update_device_type(device_data_json["vzid"].sn, "type", $("#cur_device_type").val());
                            var zTree = $.fn.zTree.getZTreeObj("treeDemo");
                            var node = zTree.getNodeByParam("deviceSN", device_data_json["vzid"].sn, null);
                            if (node) {
                                if (node.getParentNode().level == 1) {
                                    var childs = node.getParentNode().children;
                                    for (var i = 0; i < childs.length; i++) {
                                        var cur_select = "#" + childs[i].deviceSN + "_select";
                                        childs[i].deviceType = $("#cur_device_type").val();
                                        $(cur_select).select_val(childs[i].deviceType);
                                        update_device_type(childs[i].deviceSN, "type", childs[i].deviceType);
                                    }
                                } else {
                                    node.deviceType = $("#cur_device_type").val();
                                    var cur_select = "#" + node.deviceSN + "_select";
                                    $(cur_select).select_val(node.deviceType);
                                }
                            }
                            var obj = $(".categoryDiv div[deviceSN='" + device_data_json["vzid"].sn + "']");
                            if (obj.length > 0) {
                                obj.attr("deviceType", $("#cur_device_type").val());
                            }

                            //clear_tb();
                        });

                        function checkIsSave() {
                            if (!isSave) {
                                return "出入口配置修改内容未保存";
                            }
                        }
                        window.onbeforeunload = function () {
                            return checkIsSave();
                        }
                        var req = {};
                        req.type = "get_group_cfg";
                        dg_json_ajax(req,init_tree_and_tb);

                        
                        //var test = {
                        //    "vzid": {
                        //        "name": "",
                        //        "sn": "13245432115-BD4587545",
                        //        "type": "input",
                        //        "ip_addr": "127.168.225.168"
                        //    },
                        //    "group_cfg": {
                        //        "group_vzids": [
                        //    {
                        //        "name": "Uk9PVA==&MTI3LjAuMC4y",
                        //        "sn": "13245432115-BD458754",
                        //        "type": "output",
                        //        "ip_addr": "127.0.0.2",
                        //        "connect_status": 0
                        //    },
                        //    {
                        //        "name": "Uk9PVA==&MTI3LjAuMC4z",
                        //        "sn": "13245432115-BD45875",
                        //        "type": "input",
                        //        "ip_addr": "127.0.0.3",
                        //        "connect_status": 1
                        //    },
                        //    {
                        //        "name": "Uk9PVA==&dGVzdDIz",
                        //        "sn": "13245432115-BD4587",
                        //        "type": "output",
                        //        "ip_addr": "127.0.0.4",
                        //        "connect_status": 0
                        //    }
                        //        ]
                        //    }
                        //};
                        //init_tree_and_tb(JSON.stringify(test));
                    }
                }

                var tab_query_record = new function () {
                    function show_record(data) {
                        var json = eval("(" + data + ")");
                        json_data = json["search_result"];
                        if (!json_data) {
                            return false;
                        }
                        $("#query_result tr:gt(0)").remove();
                        for (var index = 0; index < json_data.length; index++) {
                            var input = json_data[index]["input_record"];
                            var output = json_data[index]["output_record"];
                            if (json_data[index]["record_type"] == "input") {
                                $("#query_result").append(get_info_tr(input["ivs_result_param"].plate, input["ivs_result_param"]["timeval"].tv_sec, input.state, input["device_name"].name, input["device_name"].ip_addr));
                            } else if (json_data[index]["record_type"] == "output") {
                                $("#query_result").append(get_leave_info(input["ivs_result_param"].plate,
                                    output.state,
                                    input["device_name"].name,
                                    input["ivs_result_param"]["timeval"].tv_sec,
                                    input["device_name"].ip_addr,
                                    output["device_name"].name,
                                    output["ivs_result_param"]["timeval"].tv_sec,
                                    output["device_name"].ip_addr));
                            }
                        }
                    }
                    function search_record() {
                        var plate = $("#query_plate").val();
                        if (plate.replace(/(^\s*)|(\s*$)/g, '') == "") {
                            alert("请输入车牌");
                            return false;
                        }
                        var record_state = parseInt($("#record_state").val());
                        var record_type = $("#record_type").val();
                        var req = {};
                        req.type = "search_plate";
                        req.record_state = record_state;
                        req.record_type = record_type;
                        req.plate = plate;
                        dg_json_ajax(req, show_record);
                    }
                    this.init = function () {
                        init_selectmenu("#record_state", 110, 150);
                        init_selectmenu("#record_type", 110, 150);
                        $("#query_plate_refresh").click(search_record);
                    }
                }

                var tab_dg_cfg = new function () {
                    function get_ast_mode() {
                        var req = {};
                        req.type = "get_ast_mode";
                        dg_json_ajax(req, function (ajaxdata) {
                            var json_data = eval("(" + ajaxdata + ")");
                            if (json_data.state == 200) {
                                g_ast_mode = json_data.mode;
                                $("#output_result").select_val(json_data.mode);
                            }
                        });
                    }

                    function set_ast_mode() {
                        var mode = $("#output_result").select_val();
                        if (mode == g_ast_mode) {
                            return false;
                        }
                        var req = {};
                        req.type = "set_ast_mode";
                        req.mode = mode;
                        dg_json_ajax(req, set_show);
                    }

                    function get_ast_dealy_time() {
                        var req = {};
                        req.type = "get_ast_dealy_time";
                        dg_json_ajax(req, function (ajaxdata) {
                            var json_data = eval("(" + ajaxdata + ")");
                            if (json_data.state == 200) {
                                g_dealy_time = json_data.dealy_time;
                                $("#delay_txt").val(json_data.dealy_time);
                            }
                        });
                    }

                    function set_ast_dealy_time() {
                        var delay_txt = parseInt($("#delay_txt").val());
                        if (isNaN(delay_txt) || delay_txt < 0 || delay_txt > 65536) {
                            alert("请输入0-65536整数！");
                            return false;
                        }
                        if (g_dealy_time == delay_txt) {
                            return false;
                        }
                        var req = {};
                        req.type = "set_ast_dealy_time";
                        req.dealy_time = delay_txt;
                        dg_json_ajax(req, set_show);
                    }

                    function get_device_match_mode() {
                        var req = {};
                        req.type = "get_device_match_mode";
                        dg_json_ajax(req, function (ajaxdata) {
                            var json_data = eval("(" + ajaxdata + ")");
                            if (json_data.state == 200) {
                                g_match_mode = json_data.mode;
                                if (json_data.mode == "fuzzy_mode") {
                                    $("#fuzzy_check").check_val(true);
                                } else {
                                    $("#exact_check").check_val(true);
                                }
                            }
                        });
                    }

                    function set_device_match_mode() {
                        var match_mode = $("#exact_check").is(":checked") ? "exact_mode" : "fuzzy_mode";
                        if (g_match_mode == match_mode) {
                            return false;
                        }
                        var req = {};
                        req.type = "set_device_match_mode";
                        req.mode = match_mode;
                        dg_json_ajax(req, set_show);
                    }

                    function set_show(ajaxdata) {
                        var json_data = eval("(" + ajaxdata + ")");
                        if (json_data.state == 200) {
                            show_informer();
                        } else {
                            alert("保存失败");
                        }
                    }
                    var g_platefilter;
                    function get_group_shared_io() {
                        var req = {};
                        req.type = "get_group_shared_io";
                        dg_json_ajax(req, function (ajaxdata) {
                            var json_data = eval("(" + ajaxdata + ")");
                            if (json_data.state == 200) {
                                var decode = json_data.value;
                                g_platefilter = decode;
                                var mask = 0x1;

                                var out1 = decode & mask;
                                var out2 = decode & (mask << 1);
                                var out3 = decode & (mask << 2);
                                var out4 = decode & (mask << 3);
                                var out5 = decode & (mask << 4);
                                var out6 = decode & (mask << 5);
                                var in1 = decode & (mask << 16);
                                var in2 = decode & (mask << 17);
                                var in3 = decode & (mask << 18);

                                $("#out1").check_val(out1 > 0);
                                $("#out2").check_val(out2 > 0);
                                $("#out3").check_val(out3 > 0);
                                $("#out4").check_val(out4 > 0);
                                $("#out5").check_val(out5 > 0);
                                $("#out6").check_val(out6 > 0);
                                $("#in1").check_val(in1 > 0);
                                $("#in2").check_val(in2 > 0);
                                $("#in3").check_val(in3 > 0);
                            }
                        });
                    }
                    function set_group_shared_io() {
                        var req = {};
                        req.type = "set_group_shared_io";
                        var out1 = $("#out1").check_val() ? "1" : "0";
                        var out2 = $("#out2").check_val() ? "1" : "0";
                        var out3 = $("#out3").check_val() ? "1" : "0";
                        var out4 = $("#out4").check_val() ? "1" : "0";
                        var out5 = $("#out5").check_val() ? "1" : "0";
                        var out6 = $("#out6").check_val() ? "1" : "0";
                        var in1 = $("#in1").check_val() ? "1" : "0";
                        var in2 = $("#in2").check_val() ? "1" : "0";
                        var in3 = $("#in3").check_val() ? "1" : "0";

                        var platefilter = parseInt(out1) | (parseInt(out2) << 1) | (parseInt(out3) << 2) | (parseInt(out4) << 3) | (parseInt(out5) << 4) | (parseInt(out6) << 5) | (parseInt(in1) << 16) | (parseInt(in2) << 17) | (parseInt(in3) << 18);
                        req.value = platefilter;
                        if (g_platefilter == platefilter) {
                            return false;
                        }
                        dg_json_ajax(req, set_show);
                    }
                    function get_boardversion_info() {
                        $.ajax({
                            url: "../vb.htm?getboardversioninfo",
                            success: function (ajaxdata) {
                                if (precheck(ajaxdata)) {
                                    return;
                                }
                                ajaxdata = ajaxdata.split("=");
                                if (!ajaxdata[0].match(/OK/)) {
                                    return;
                                }
                                var mask = 0x1;
                                mask = mask << 24;
                                var decode = parseInt(ajaxdata[1]);
                                decode = mask | decode;
                                decode = decode.toString(2);
                                var d_type = decode.substring(decode.length - 24, decode.length - 12);
                                d_type = parseInt(d_type, 2);
                                if (d_type == 2) {
                                    $("#out4_td").remove();
                                    $("#in3_td").remove();
                                    $("#out5_td").remove();
                                    $("#out6_td").remove();
                                } else {
                                    var m_version = decode.substring(decode.length - 6);
                                    m_version = parseInt(m_version, 2);

                                    var s_version = decode.substring(decode.length - 12, decode.length - 6);
                                    s_version = parseInt(s_version, 2);

                                    var version = m_version + "." + s_version;
                                    g_hw_version = version;

                                    if (version == "1.2" || version == "7.3" || version == "7.5" || version == "8.0") {
                                        $("#out6_td").remove();
                                    } else if (version == "5.8") {
                                        $("#out3_td").remove();
                                        $("#out4_td").remove();
                                        $("#in3_td").remove();
                                    } else if (version == "8.1") {
                                        $("#out4_td").remove();
                                        $("#out6_td").remove();
                                    } else if (version == "9.0") {
                                        $("#out4_td").remove();
                                        $("#in3_td").remove();
                                        $("#out6_td").remove();
                                    } else if (version == "10.0") {
                                        $("#out3_td").remove();
                                        $("#out4_td").remove();
                                        $("#in3_td").remove();
                                        $("#out5_td").remove();
                                        $("#out6_td").remove();
                                    }
                                }
                            },
                            async: false
                        });
                    }
                    this.init = function () {
                        init_selectmenu("#output_result", 110, 150);
                        $("#dg_submit").click(function () {
                            set_ast_mode();
                            set_ast_dealy_time();
                            set_device_match_mode();
                            set_group_shared_io();
                        });
                        get_boardversion_info();
                        get_ast_mode();
                        get_ast_dealy_time();
                        get_device_match_mode();
                        get_group_shared_io();
                    }
                }

                $(function () {
                    //tab_device_group_info.init();
                    //tab_current_record.init();
                    tab_remain_vehicles.init();
                    //tab_query_record.init();
                    tab_dg_cfg.init();
                });
            });
        });
    </script>
</head>
<body>
    <div id="tabs" style="min-width:960px">
        <ul>
            <!--<li><a href="#tabs-1">当前组网设备</a></li>-->
            <!--<li><a href="#tabs-2">当前设备记录</a></li>-->
            <li><a href="#tabs-3">出入口配置</a></li>
            <!--<li><a href="#tabs-4">记录查询</a></li>-->
            <li><a href="#tabs-5">参数设置</a></li>
        </ul>
        <!--<div id="tabs-1">
            <input id="submit_refresh" type="submit" value="刷新列表" />
            <br/>
            <table id="devicetable" class="ui-widget ui-widget-content realtable" style="font-size:12px; margin: 0;width:900px;text-align:center;" cellpadding="0" cellspacing="0">
                <tr class="ui-widget-header"><th>设备名称</th><th>设备序列号</th><th>设备IP</th><th>设备类型</th><th>是否开启组网</th><th>是否连接</th></tr>
            </table>
        </div>-->
        <!--<div id="tabs-2">
            <div style="margin-bottom:10px;">
                <p><select id="device_type"><option value="2">入口信息</option><option value="1">出口信息</option><option value="0">出口缓存信息</option></select></p>
            </div>
            <table id="current_device_info" class="ui-widget ui-widget-content realtable" style="font-size:12px; margin: 0;width:900px;text-align:center;" cellpadding="0" cellspacing="0">
                <tr class="ui-widget-header"><th>车牌号</th><th>进入时间</th><th>状态</th><th>入口名称</th><th>设备IP</th></tr>
            </table>
            <table class="dummy">
                <tr>
                    <td>
                        <input id="current_info_refresh" type="submit" value="刷新" />
                    </td>
                    <td>
                        <input id="current_info_pre_page" type="submit" value="上页" />
                    </td>
                    <td>
                        <input id="current_info_next_page" type="submit" value="下页" />
                    </td>
                    <td id="current_info_page_hint" style="min-width:60px; font-size:0.9em"></td>
                    <td>
                        <input id="current_info_page_goto" type="text" size="5" />
                    </td>
                    <td>
                        <input id="current_info_page_goto_sub" type="submit" value="跳转" />
                    </td>
                    <td>
                        <input id="current_info_page_start" type="submit" value="首页" />
                    </td>
                    <td>
                        <input id="current_info_page_end" type="submit" value="末页" />
                    </td>
                </tr>
            </table>
        </div>-->
        <div id="tabs-3">
            <div class="cur_device_state" style="height:30px;width:900px;position:relative;line-height:30px;margin-bottom:10px;">
                <span id="cur_device_span" style="display:inline;float:left;margin-right:10px;">当前设备 </span><select id="cur_device_type" style="float:left"><option value="input">入口</option><option value="output">出口</option><option value="unkown">未定义</option></select>
                <input style="height:26px;float:right;width:150px;line-height:1px;" id="set_device_info" type="submit" value="保存至组网设备" />
            </div>
            <div class="device_top" style="width:900px;height:400px;">
                <div class="device_left" style="float:left;width:69%;min-height:400px;">
                    <div class="show_tree" style="width:40%;height:400px;float:left;border:1px solid #aaa;overflow:auto;position:relative;">
                        <input id="new_node" type="button" name="new_node" value="新建车库" style="position:absolute;top:0;right:0px;height:20px;line-height:1px"/>
                        <ul id="treeDemo" class="ztree"></ul>
                    </div>
                    <div class="show_tree_content" style="width:59%;height:400px;float:left;border:1px solid #aaa;margin-left:-1px;overflow-y:auto;">
                        <table id="show_tree_cur" class="custom-tb ui-widget ui-widget-content realtable" style="font-size:12px; margin-top: -1px;width:100%;text-align:center;" cellpadding="0" cellspacing="0">
                            <tr class="tr-title ui-widget-header"><th width="40%">设备名称</th><th width="30%">设备IP</th><th width="30%">状态</th></tr>
                        </table>
                    </div>
                </div>
                <div class="device_right" style="float:right;width:30%;min-height:400px;">
                    <div class="div-i" style="height:192px;width:100%;outline:1px solid #aaa;">
                        <p style="height:20px;text-align:center;line-height:20px;">入口设备</p>
                        <div class="device_inner_div" style="width:100%;height:172px;overflow:auto;">
                            <table id="show_input_tb" class="ui-widget ui-widget-content realtable" style="font-size:12px; margin: 0;width:100%;text-align:center;" cellpadding="0" cellspacing="0">
                                <tr class="ui-widget-header"><th width="50%">设备名称</th><th width="50%">设备IP</th></tr>
                            </table>
                        </div>
                    </div>
                    <div class="div-o" style="height:192px;width:100%;outline:1px solid #aaa;margin-top:16px;">
                        <p style="height:20px;text-align:center;line-height:20px;">出口设备</p>
                        <div class="device_inner_div" style="width:100%;height:172px;overflow:auto;">
                            <table id="show_output_tb" class="ui-widget ui-widget-content realtable" style="font-size:12px; margin: 0;width:100%;text-align:center;" cellpadding="0" cellspacing="0">
                                <tr class="ui-widget-header"><th width="50%">设备名称</th><th width="50%">设备IP</th></tr>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <div class="device_foot" >
                <div class="domBtnDiv">
                    <div class="categoryDiv" style="width:900px;height:130px;margin-top:16px;border:1px solid #aaa;overflow:auto">
                    </div>
                </div>
            </div>
        </div>
        <!--<div id="tabs-4">
            <div style="width:900px;margin-bottom:10px;">
                <select id="record_state"><option value="8">所有状态</option><option value="0">已使用</option><option value="1">未使用</option><option value="2">已失效</option><option value="3">未完成</option></select>
                <select id="record_type"><option value="all">所有记录</option><option value="input">入口记录</option><option value="output">出口记录</option></select>
                <input style="vertical-align:top;" id="query_plate" type="text" size="11" />
                <input style="vertical-align:top;height:26px;line-height:1px;" id="query_plate_refresh" type="submit" value="查询" />
            </div>
            <table id="query_result" class="ui-widget ui-widget-content realtable" style="font-size:12px; margin: 0;width:900px" cellpadding="0" cellspacing="0">
                <tr class="ui-widget-header"><th width="70px">车牌号</th><th width="40px">状态</th><th>入口名称</th><th>进入时间</th><th>入口IP地址</th><th>出口名称</th><th>出去时间</th><th>出口IP地址</th></tr>
            </table>
        </div>-->
        <div id="tabs-5">
            <table class="dummy">
                <tr>
                    <td>输出结果：</td>
                    <td>
                        <select id="output_result">
                            <option value="aggregated">多个结果</option>
                            <option value="direct">单一结果</option>
                        </select>
                    </td>
                </tr>
                <tr>
                    <td>延迟等待：</td>
                    <td>
                        <input type="text" style="width:50px;" id="delay_txt" /> &nbsp;毫秒
                    </td>
                </tr>
                <tr>
                    <td valign="middle">匹配规则：</td>
                    <td>
                        <input type="radio" name="matching_check" id="exact_check" />
                        <label for="exact_check">精确匹配</label>
                    </td>
                </tr>
                <tr>
                    <td></td>
                    <td style="min-width:300px;">
                        <input type="radio" name="matching_check" id="fuzzy_check" />
                        <label for="fuzzy_check">相似字符匹配(包括:0-D,8-B,0-Q,E-F)</label>
                    </td>
                </tr>
                <tr>
                    <td valign="top" style="max-width:50px;padding-top:12px;">相辅设备</br>共享IO：</td>
                    <td>
                        <table>
                            <tr>
                                <td style="padding:0 6px 0 0;" id="out5_td"><input type="checkbox" id="out5" /><label for="out5">电平输出1</label></td>
                                <td style="padding:0 6px 0 0;" id="out6_td"><input type="checkbox" id="out6" /><label for="out6">电平输出2</label></td>
                            </tr>
                            <tr>
                                <td style="padding:0 6px 0 0;min-width:140px;"><input type="checkbox" id="out1" /><label for="out1">开关量输出1</label></td>
                                <td style="padding:0 6px 0 0;min-width:140px;"><input type="checkbox" id="out2" /><label for="out2">开关量输出2</label></td>
                                <td style="padding:0 6px 0 0;min-width:140px;" id="out3_td"><input type="checkbox" id="out3" /><label for="out3">开关量输出3</label></td>
                                <td style="padding:0 6px 0 0;min-width:140px;" id="out4_td"><input type="checkbox" id="out4" /><label for="out4">开关量输出4</label></td>
                            </tr>
                            <tr>
                                <td style="padding:0 6px 0 0;"><input type="checkbox" id="in1" /><label for="in1">开关量/电平输入1</label></td>
                                <td style="padding:0 6px 0 0;"><input type="checkbox" id="in2" /><label for="in2">开关量/电平输入2</label></td>
                                <td style="padding:0 6px 0 0;" id="in3_td"><input type="checkbox" id="in3" /><label for="in3">开关量/电平输入3</label></td>
                            </tr>
                        </table>
                    </td>
                </tr>
                <tr><td>&nbsp;</td></tr>
                <tr>
                    <td colspan="2" align="center">
                        <input type="submit" id="dg_submit" value="确定" />
                    </td>
                </tr>
            </table>
        </div>
    </div>

</body>
</html>
